{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./FieldSelector.ts","webpack:///./config_ctrl.ts","webpack:///./constants.ts","webpack:///./datasource.ts","webpack:///./module.ts","webpack:///./query_ctrl.ts","webpack:///./sensu/sensu.ts","webpack:///./transformer/index.ts","webpack:///./transformer/table_transformer.ts","webpack:///./transformer/timeseries_transformer.ts","webpack:///./types.ts","webpack:///./utils/config_migration_util.ts","webpack:///./utils/data_aggregation_util.ts","webpack:///./utils/datasource_filter_util.ts","webpack:///./utils/query_util.ts","webpack:///external \"app/core/app_events\"","webpack:///external \"app/plugins/sdk\"","webpack:///external \"lodash\"","webpack:///external \"moment\""],"names":[],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./module.ts\");\n","import _ from 'lodash';\r\nimport {SensuQueryCtrl} from './query_ctrl';\r\n\r\n/**\r\n * Helper class for building field selectors.\r\n * This class should be refactored => no segments should be in `target` but directly in the query controller.\r\n */\r\nexport default class FieldSelector {\r\n  fieldSegments: any[];\r\n\r\n  fieldType: string;\r\n\r\n  attributePath: string;\r\n\r\n  alias: string;\r\n\r\n  /**\r\n   * Restores the segments based on the given parameters.\r\n   */\r\n  static restore = (ctrl: SensuQueryCtrl, segments: FieldSelector): FieldSelector => {\r\n    const path = _(segments.fieldSegments)\r\n      .map(segment => segment.value)\r\n      .join('.');\r\n\r\n    const selector: FieldSelector = new FieldSelector(ctrl, path);\r\n\r\n    selector.alias = segments.alias;\r\n\r\n    return selector;\r\n  };\r\n\r\n  constructor(ctrl: SensuQueryCtrl, initPath: string) {\r\n    this.fieldSegments = _.map(initPath.split('.'), path =>\r\n      ctrl.uiSegmentSrv.newKey(path)\r\n    );\r\n    this.refresh(ctrl);\r\n  }\r\n\r\n  /**\r\n   * Refreshes the selectors UI elements - if a segment changes its value.\r\n   */\r\n  refresh = (ctrl: SensuQueryCtrl): void => {\r\n    if (!ctrl.dataPreview || ctrl.dataPreview.length <= 0) {\r\n      return;\r\n    }\r\n    let selection = ctrl.dataPreview[0];\r\n\r\n    for (let i = 0; i < this.fieldSegments.length; i++) {\r\n      const segment: any = this.fieldSegments[i];\r\n      const value: string = segment.value;\r\n\r\n      if (selection) {\r\n        selection = _.get(selection, value);\r\n      }\r\n\r\n      if (value === '*') {\r\n        this.fieldSegments = this.fieldSegments.slice(0, i + 1);\r\n      }\r\n    }\r\n\r\n    if (selection === undefined) {\r\n      this.fieldType = 'undefined';\r\n    } else if (_.isPlainObject(selection)) {\r\n      this.fieldSegments.push(ctrl.uiSegmentSrv.newKey('*'));\r\n      this.fieldType = 'object';\r\n    } else if (_.isArray(selection)) {\r\n      this.fieldType = 'array';\r\n    } else if (typeof selection === 'number') {\r\n      this.fieldType = 'number';\r\n    } else {\r\n      this.fieldType = 'string';\r\n    }\r\n\r\n    this.attributePath = this.getPath();\r\n  };\r\n\r\n  /**\r\n   * Returns the current attribute path of this selector.\r\n   */\r\n  getPath = (): string => {\r\n    return _(this.fieldSegments)\r\n      .map(segment => segment.value)\r\n      .join('.');\r\n  };\r\n}\r\n","import {InstanceSettings} from './types';\r\n\r\n/**\r\n * Controller responsible for the configuration ui.\r\n */\r\nexport class SensuConfigCtrl {\r\n  static templateUrl = 'partials/config.html';\r\n\r\n  // the current datasource settings\r\n  current: InstanceSettings;\r\n\r\n  /** @ngInject **/\r\n  constructor($scope) {\r\n    $scope.$watch(\r\n      () => this.current.url,\r\n      value => (this.current.jsonData.currentUrl = value)\r\n    );\r\n    $scope.$watch(\r\n      () => this.current.basicAuth,\r\n      value => {\r\n        if (value) {\r\n          this.current.jsonData.useApiKey = false;\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * When the \"Use API Key\" option is toggled.\r\n   */\r\n  onUseApiKeyToggle = () => {\r\n    const current = this.current;\r\n    if (current.jsonData.useApiKey) {\r\n      current.basicAuth = false;\r\n      this.resetApiKey();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Resets the currely set API key.\r\n   */\r\n  resetApiKey = () => {\r\n    this.current.secureJsonFields.apiKey = false;\r\n    this.current.secureJsonData = this.current.secureJsonData || {};\r\n    this.current.secureJsonData.apiKey = '';\r\n  };\r\n}\r\n","import {AggregationType, ApiEndpoint, TextValue} from './types';\r\n\r\n/**\r\n * The default limit.\r\n */\r\nexport const DEFAULT_LIMIT = 100;\r\n\r\n/**\r\n * The default limit for aggregation queries.\r\n */\r\nexport const DEFAULT_AGGREGATION_LIMIT = 0;\r\n\r\n/**\r\n * Supported aggregation functions.\r\n */\r\nexport const AGGREGATION_TYPES = <AggregationType[]>[\r\n  {\r\n    value: 'count',\r\n    text: 'Count',\r\n    requiresTarget: false,\r\n  },\r\n  {\r\n    value: 'sum',\r\n    text: 'Sum',\r\n    requiresTarget: true,\r\n  },\r\n];\r\n\r\n/**\r\n * Sensu API endpoints.\r\n */\r\nexport const API_ENDPOINTS = <ApiEndpoint[]>[\r\n  {\r\n    text: 'Entity API',\r\n    value: 'entity',\r\n    url: '/entities',\r\n    fieldSelectors: [\r\n      // defined by the response filter feature (see: https://docs.sensu.io/sensu-go/latest/api/#response-filtering)\r\n      'entity.name',\r\n      'entity.namespace',\r\n      'entity.deregister',\r\n      'entity.entity_class',\r\n      'entity.subscriptions',\r\n    ],\r\n  },\r\n  {\r\n    text: 'Events API',\r\n    value: 'events',\r\n    url: '/events',\r\n    fieldSelectors: [\r\n      'event.is_silenced',\r\n      'event.name',\r\n      'event.namespace',\r\n      'event.check.handlers',\r\n      'event.check.is_silenced',\r\n      'event.check.name',\r\n      'event.check.publish',\r\n      'event.check.round_robin',\r\n      'event.check.runtime_assets',\r\n      'event.check.status',\r\n      'event.check.subscriptions',\r\n      'event.entity.deregister',\r\n      'event.entity.entity_class',\r\n      'event.entity.name',\r\n      'event.entity.subscriptions',\r\n    ],\r\n  },\r\n  {\r\n    text: 'Namespaces API',\r\n    value: 'namespaces',\r\n    url: '/namespaces',\r\n    fieldSelectors: ['namespace.name'],\r\n  },\r\n];\r\n\r\n/**\r\n * Supported query types.\r\n */\r\nexport const QUERY_TYPES = <TextValue[]>[\r\n  {\r\n    value: 'field',\r\n    text: 'Field Selection',\r\n  },\r\n  {\r\n    value: 'aggregation',\r\n    text: 'Aggregation',\r\n  },\r\n];\r\n\r\n/**\r\n * Supported result data formats.\r\n */\r\nexport const FORMATS = <TextValue[]>[\r\n  {\r\n    value: 'table',\r\n    text: 'Table',\r\n  },\r\n  {\r\n    value: 'table-v',\r\n    text: 'Table (Vertical)',\r\n  },\r\n  {\r\n    value: 'series',\r\n    text: 'Time Series',\r\n  },\r\n];\r\n\r\n/**\r\n * Properties containing a timestamp and should converted (from seconds to miliseconds).\r\n */\r\nexport const TIME_PROPERTIES: string[] = [\r\n  'timestamp',\r\n  'check.executed',\r\n  'check.issued',\r\n  'check.last_ok',\r\n  'entity.last_seen',\r\n  'last_seen',\r\n];\r\n","import _ from 'lodash';\n\nimport sensu from './sensu/sensu';\nimport {\n  API_ENDPOINTS,\n  DEFAULT_LIMIT,\n  DEFAULT_AGGREGATION_LIMIT,\n  TIME_PROPERTIES,\n} from './constants';\nimport FieldSelector from './FieldSelector';\nimport FilterUtils from './utils/datasource_filter_util';\nimport QueryUtils from './utils/query_util';\nimport transformer from './transformer';\nimport ConfigMigration from './utils/config_migration_util';\nimport AggregationUtils from './utils/data_aggregation_util';\n\nimport {\n  PreparedTarget,\n  ColumnMapping,\n  DataPoint,\n  ClientSideFilter,\n  QueryComponents,\n  InstanceSettings,\n  QueryOptions,\n  GrafanaTarget,\n} from './types';\n\nexport default class SensuDatasource {\n  url: string;\n\n  /** @ngInject */\n  constructor(\n    public instanceSettings: InstanceSettings,\n    public backendSrv,\n    private templateSrv\n  ) {\n    this.url = instanceSettings.url.trim();\n  }\n\n  /**\n   * Preprocces the query targets like resolving template variables.\n   */\n  prepareQuery = (target: GrafanaTarget, queryOptions) => {\n    // resolve API url\n    const apiUrl = this._getApiUrl(target);\n    // resolve filters\n    const clientFilters = _.cloneDeep(target.clientSideFilters);\n    const serverFilters = _.cloneDeep(target.serverSideFilters);\n\n    const preparedTarget: PreparedTarget = <PreparedTarget>{\n      apiUrl,\n      clientFilters,\n      serverFilters,\n      target: _.cloneDeep(target), //ensure modifications are not globally propagated\n    };\n\n    this._resolveTemplateVariables(preparedTarget, queryOptions);\n\n    return preparedTarget;\n  };\n\n  /**\n   * Resolves template variables in the given prepared target.\n   */\n  _resolveTemplateVariables = (preparedTarget: PreparedTarget, queryOptions) => {\n    const {target, clientFilters, serverFilters} = preparedTarget;\n\n    // resolve variables in namespaces\n    const namespaces: string[] = this.templateSrv\n      .replace(target.namespace, queryOptions.scopedVars, 'pipe')\n      .split('|');\n\n    target.namespaces = namespaces;\n\n    // resolve variables in filters\n    [clientFilters, serverFilters].forEach((filters) =>\n      filters.forEach((filter) => {\n        filter.key = this.templateSrv.replace(filter.key, queryOptions.scopedVars, 'csv');\n        filter.value = this.templateSrv.replace(\n          filter.value,\n          queryOptions.scopedVars,\n          'regex'\n        );\n      })\n    );\n  };\n\n  /**\n   * Returns the url of the API used by the given target.\n   */\n  _getApiUrl = (target: GrafanaTarget) => {\n    const apiEndpoint: any = _.find(API_ENDPOINTS, {value: target.apiEndpoints});\n    if (apiEndpoint) {\n      return apiEndpoint.url;\n    } else {\n      return API_ENDPOINTS[0].url;\n    }\n  };\n\n  /**\n   * Executes a query.\n   */\n  query(queryOptions) {\n    const queryTargets = _(queryOptions.targets)\n      .map(ConfigMigration.migrate)\n      .map((target) => this.prepareQuery(target, queryOptions))\n      .value();\n\n    // empty result in case there is no query defined\n    if (queryTargets.length === 0) {\n      return Promise.resolve({data: []});\n    }\n\n    const queries = queryTargets.map((prepTarget) => {\n      const {\n        apiUrl,\n        clientFilters,\n        serverFilters,\n        target: {queryType, fieldSelectors, namespaces, limit},\n      } = prepTarget;\n\n      // verify and set correct limit\n      let parsedLimit: number = _.defaultTo(parseInt(limit || ''), -1);\n      if (parsedLimit < 0) {\n        if (queryType === 'aggregation') {\n          parsedLimit = DEFAULT_AGGREGATION_LIMIT;\n        } else {\n          parsedLimit = DEFAULT_LIMIT;\n        }\n      }\n\n      const queryOptions: QueryOptions = {\n        method: 'GET',\n        url: apiUrl,\n        namespaces,\n        limit: parsedLimit,\n        responseFilters: serverFilters,\n      };\n\n      return sensu\n        .query(this, queryOptions)\n        .then(this._timeCorrection)\n        .then((data) => this._filterData(data, clientFilters))\n        .then((data) => {\n          if (queryType === 'field') {\n            return this._queryFieldSelection(data, fieldSelectors);\n          } else if (queryType === 'aggregation') {\n            return this._queryGroupAndAggregate(data, prepTarget);\n          } else {\n            return [];\n          }\n        });\n    });\n\n    return Promise.all(queries).then((queryResults: any) => {\n      if (queryOptions.resultAsPlainArray) {\n        // return only values - e.g. for template variables\n        const result = _(queryResults)\n          .map((result) => transformer.toTable(result, false))\n          .map((result) => result.rows)\n          .flatten()\n          .flatten()\n          .filter()\n          .map((value) => {\n            return {text: value};\n          })\n          .value();\n\n        return result;\n      } else {\n        const resultDataList: any[] = _.flatMap(queryResults, (queryResult, index) => {\n          const {\n            target: {format},\n          } = queryTargets[index];\n\n          if (format === 'series') {\n            // return time series format\n            return transformer.toTimeSeries(queryResult);\n          } else {\n            const isVertical = format === 'table-v';\n            // return table format\n            return transformer.toTable(queryResult, isVertical);\n          }\n        });\n\n        return {\n          data: resultDataList,\n        };\n      }\n    });\n  }\n\n  /**\n   * Converting the timestamps from seconds to miliseconds because Sensu's timestamp\n   * resolution is in seconds but Grafana uses miliseconds.\n   */\n  _timeCorrection = (data: any) => {\n    _.each(data, (dataElement) => {\n      // iterate over all time properties\n      _.each(TIME_PROPERTIES, (property) => {\n        // fetch the properties value\n        const time = _.get(dataElement, property, -1);\n        // in case a time is set, we multiply them by 1000 to get miliseconds.\n        // in case the time is 0, we'll remove it, otherwise Grafana will display the epoch's starting times\n        if (time > 0) {\n          _.set(dataElement, property, time * 1000);\n        } else {\n          _.unset(dataElement, property);\n        }\n      });\n    });\n    return data;\n  };\n\n  /**\n   * This function will group the given data (if specified in the PreparedTarget) and aggregate it accordingly.\n   *\n   * @param data the data to group and aggregate\n   * @param prepTarget the settings for the grouping and aggregation\n   */\n  _queryGroupAndAggregate = (data: any[], prepTarget: PreparedTarget) => {\n    const {\n      target: {\n        aggregationAlias: alias,\n        aggregationType: type,\n        format,\n        groupBy: groupAttribute,\n      },\n    } = prepTarget;\n    // the name of the result value (the metric name if timeseries format is used, otherwise the column header)\n    const name = alias ? alias : type || 'value';\n\n    if (!groupAttribute) {\n      // just aggregate without grouping\n      const aggregationResult = this._queryAggregation(data, name, prepTarget);\n      return [aggregationResult];\n    } else {\n      // first group the data..\n      const groups = _.groupBy(data, groupAttribute);\n\n      // ..then aggregate the individual groups\n      const groupResult = _(groups)\n        .map((dataGroup, groupKey) =>\n          this._queryAggregation(dataGroup, groupKey, prepTarget)\n        )\n        .value();\n\n      if ((format === 'table' || format === 'table-v') && groupResult) {\n        const {groupAlias} = prepTarget.target;\n        // we transform the groups into multiple columns in case the table format is used\n        return this._mergeTableAggregation(\n          groupResult,\n          groupAlias || groupAttribute,\n          name\n        );\n      } else {\n        return groupResult;\n      }\n    }\n  };\n\n  /**\n   * We merge the seperate aggregation result into a single one, thus we get a nicer visualization\n   * in the table panel, where the group-attribute and value have their own column.\n   */\n  _mergeTableAggregation = (\n    groupData: (DataPoint[] | null)[],\n    groupByAttribute: string,\n    alias: string\n  ) => {\n    return _(groupData)\n      .map((group) => {\n        if (!group || group.length == 0) {\n          return null;\n        }\n        const point: DataPoint = group[0];\n        return [\n          {\n            name: groupByAttribute,\n            value: point.name,\n          },\n          {\n            name: alias,\n            value: point.value,\n          },\n        ];\n      })\n      .filter() // null values\n      .value();\n  };\n\n  /**\n   * Process the data if the query type is 'aggregation'.\n   */\n  _queryAggregation = (data: any[], name: string, prepTarget: PreparedTarget) => {\n    const {aggregationType: type} = prepTarget.target;\n\n    if (type === 'count') {\n      return AggregationUtils.count(data, name);\n    } else if (type === 'sum') {\n      const {aggregationField} = prepTarget.target;\n      return AggregationUtils.sum(data, name, aggregationField);\n    } else {\n      throw new Error('The aggreation type \"' + type + '\" is not supported.');\n    }\n  };\n\n  /**\n   * Process the data if the query type is 'field'.\n   */\n  _queryFieldSelection = (data: any, fieldSelectors: FieldSelector[]) => {\n    const columnMappings: ColumnMapping[] = this._extractColumnMappings(\n      data,\n      fieldSelectors\n    );\n\n    const resultData = _.map(data, (dataElement) => {\n      // extract selected data\n      return _.map(columnMappings, (mapping) => {\n        const value: any = _.get(dataElement, mapping.path);\n\n        return <DataPoint>{\n          name: mapping.alias,\n          value: value,\n        };\n      });\n    });\n\n    return resultData;\n  };\n\n  /**\n   * Creates a column mapping - which object attribute/path is related to which column.\n   */\n  _extractColumnMappings = (data: any, fieldSelectors: FieldSelector[]) => {\n    const result: ColumnMapping[] = _.flatMap(fieldSelectors, (selector) => {\n      const paths = _(data)\n        .map((dataElement) => this.resolvePaths(selector, dataElement))\n        .flatMap()\n        .uniq()\n        .value();\n\n      if (selector.alias) {\n        if (paths.length > 1) {\n          // use the alias in combination with an index as column name\n          return _.map(paths, (path, index) => {\n            return <ColumnMapping>{\n              path: path,\n              alias: selector.alias + '.' + index,\n            };\n          });\n        } else {\n          // use the alias instead the path as column name\n          return _.map(paths, (path) => {\n            return <ColumnMapping>{\n              path: path,\n              alias: selector.alias,\n            };\n          });\n        }\n      } else {\n        // use the path itself as column name\n        return _.map(paths, (path) => {\n          return <ColumnMapping>{\n            path: path,\n            alias: path,\n          };\n        });\n      }\n    });\n\n    return result;\n  };\n\n  /**\n   * Returns a filtered representation of the given data.\n   */\n  _filterData = (data: any, filters: ClientSideFilter[]) => {\n    return _.filter(data, (dataElement) =>\n      _.every(filters, (filter) => this._matches(dataElement, filter))\n    );\n  };\n\n  /**\n   * Returns whether the given element matches the given filter.\n   */\n  _matches = (element: any, filter: ClientSideFilter) => {\n    const filterKey: string = filter.key;\n    const matcher: string = filter.matcher;\n    const filterValue: string = filter.value;\n\n    const elementValue: any = _.get(element, filterKey);\n\n    return FilterUtils.matchs(filterValue, matcher, elementValue);\n  };\n\n  /**\n   * Resolves all existing paths of the specified selector based on the given data.\n   * Example: if the selector is '*' all possible attibutes (including nested) will be returned.\n   */\n  resolvePaths = (selector: any, data: any) => {\n    let selection: any = data;\n    let lastSelector = '';\n    let basePath = '';\n\n    for (let i = 0; i < selector.fieldSegments.length; i++) {\n      const segment: any = selector.fieldSegments[i];\n      lastSelector = segment.value;\n\n      if (lastSelector !== '*') {\n        if (basePath === '') {\n          basePath = lastSelector;\n        } else {\n          basePath = basePath + '.' + lastSelector;\n        }\n        selection = _.get(selection, lastSelector);\n      }\n    }\n\n    if (lastSelector === '*') {\n      const paths = this._deepResolve(selection);\n      if (basePath === '') {\n        return paths;\n      } else {\n        return _.map(paths, (path) => basePath + '.' + path);\n      }\n    } else {\n      return [basePath];\n    }\n  };\n\n  _deepResolve = (data) => {\n    const keys: string[] = Object.keys(data);\n\n    return _.flatMap(keys, (key) => {\n      if (_.isPlainObject(data[key])) {\n        return _.map(this._deepResolve(data[key]), (nestedKeys) => {\n          return key + '.' + nestedKeys;\n        });\n      } else {\n        return key;\n      }\n    });\n  };\n\n  /**\n   * Executes a query based on the given query command which is a string representation of it.\n   */\n  metricFindQuery(query: string) {\n    return this._query(query);\n  }\n\n  /**\n   * Executes the given query command.\n   */\n  _query = (query: string) => {\n    const queryComponents = QueryUtils.extractQueryComponents(query);\n\n    if (queryComponents === null) {\n      return Promise.resolve([]);\n    }\n    const options: any = this._transformQueryComponentsToQueryOptions(queryComponents);\n    options.resultAsPlainArray = true;\n\n    return this.query(options);\n  };\n\n  /**\n   * Transforms the given query components into an options object which can be used by the `query(..)` function.\n   */\n  _transformQueryComponentsToQueryOptions = (queryComponents: QueryComponents) => {\n    const {\n      apiKey,\n      selectedField,\n      clientFilters,\n      serverFilters,\n      namespace,\n      limit,\n    } = queryComponents;\n\n    const options = {\n      targets: [\n        <GrafanaTarget>{\n          apiEndpoints: apiKey,\n          queryType: 'field',\n          namespace: namespace,\n          limit: _.isNaN(limit) ? null : new String(limit),\n          fieldSelectors: [\n            <FieldSelector>{\n              fieldSegments: [\n                {\n                  value: selectedField,\n                },\n              ],\n            },\n          ],\n          format: 'table',\n          clientSideFilters: clientFilters,\n          serverSideFilters: serverFilters,\n          version: 2,\n        },\n      ],\n    };\n\n    return options;\n  };\n\n  /**\n   * Used by the config UI to test a datasource.\n   */\n  testDatasource() {\n    const useApiKey = _.get(this.instanceSettings, 'jsonData.useApiKey', false);\n\n    // the /auth/test endpoint is only available for testing basic auth credentials\n    const testUrl = useApiKey ? '/api/core/v2/namespaces' : '/auth/test';\n\n    return sensu\n      ._request(this, 'GET', testUrl)\n      .then(() => {\n        return {\n          status: 'success',\n          message: 'Successfully connected against the Sensu Go API',\n        };\n      })\n      .catch((error) => {\n        if (useApiKey && error.data === 'access_error') {\n          return {\n            status: 'error',\n            message: 'API Key Invalid: Could not logged in using API key',\n          };\n        }\n        return {status: 'error', message: error.message};\n      });\n  }\n}\n","import SensuDatasource from './datasource';\nimport {SensuQueryCtrl} from './query_ctrl';\nimport {SensuConfigCtrl} from './config_ctrl';\n\nexport {\n  SensuDatasource as Datasource,\n  SensuQueryCtrl as QueryCtrl,\n  SensuConfigCtrl as ConfigCtrl,\n};\n","import appEvents from 'grafana/app/core/app_events';\nimport {QueryCtrl} from 'grafana/app/plugins/sdk';\nimport _ from 'lodash';\n\nimport {\n  ApiEndpoint,\n  AggregationType,\n  TextValue,\n  GrafanaTarget,\n  ClientSideFilter,\n  ServerSideFilter,\n  ServerSideFilterType,\n} from './types';\n\nimport FieldSelector from './FieldSelector';\nimport {AGGREGATION_TYPES, API_ENDPOINTS, QUERY_TYPES, FORMATS} from './constants';\nimport {targetToQueryString} from './utils/query_util';\nimport Sensu from './sensu/sensu';\nimport ConfigMigration from './utils/config_migration_util';\n\nexport class SensuQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  // Will be stored by Grafana\n  target: GrafanaTarget;\n\n  // Constants\n  readonly aggregationTypes: AggregationType[] = AGGREGATION_TYPES;\n  readonly queryTypes: TextValue[] = QUERY_TYPES;\n  readonly formats: TextValue[] = FORMATS;\n\n  segmentAggregationTarget: any;\n  dataPreview: any = {};\n  dataPreviewBuffer: any[] = [];\n\n  apiEndpoints: ApiEndpoint[] = API_ENDPOINTS; // used in the partial\n  addFieldSegment: any;\n  namespaceSegment: any;\n  groupBySegment: any;\n\n  clientFilterSegments: any[] = [];\n  serverFilterSegments: any[] = [];\n\n  /** @ngInject **/\n  constructor($scope, $injector, private $q, public uiSegmentSrv, private templateSrv) {\n    super($scope, $injector);\n\n    // Migrate existing configurations to the latest model version\n    ConfigMigration.migrate(this.target);\n\n    const {clientSideFilters, serverSideFilters} = <GrafanaTarget>this.target;\n\n    // restore client filter segments\n    _(clientSideFilters)\n      .map(this._createClientFilterSegments)\n      .each(segmentArray => this.clientFilterSegments.push(segmentArray));\n\n    this.clientFilterSegments.push([this.uiSegmentSrv.newPlusButton()]);\n\n    //restore server filter segments\n    _(serverSideFilters)\n      .map(this._createServerFilterSegments)\n      .each(segmentArray => this.serverFilterSegments.push(segmentArray));\n\n    this.serverFilterSegments.push([this.uiSegmentSrv.newPlusButton()]);\n\n    // create field selectors\n    if (this.target.fieldSelectors === undefined) {\n      this.target.fieldSelectors = [new FieldSelector(this, '*')];\n    } else {\n      this.target.fieldSelectors = _.map(this.target.fieldSelectors, selector =>\n        FieldSelector.restore(this, selector)\n      );\n    }\n\n    if (this.target.apiEndpoints === undefined) {\n      this.target.apiEndpoints = API_ENDPOINTS[0].value;\n    }\n\n    if (this.target.queryType === undefined) {\n      this.target.queryType = this.queryTypes[0].value;\n    }\n\n    if (this.target.format === undefined) {\n      this.target.format = this.formats[0].value;\n    }\n\n    this.addFieldSegment = this.uiSegmentSrv.newPlusButton();\n\n    if (this.target.aggregation !== undefined) {\n      delete this.target.aggregation;\n    }\n\n    if (this.target.aggregationType === undefined) {\n      this.target.aggregationType = AGGREGATION_TYPES[0].value;\n    }\n\n    if (this.target.aggregationRequiresTarget === undefined) {\n      this.target.aggregationRequiresTarget = AGGREGATION_TYPES[0].requiresTarget;\n    }\n\n    if (this.target.aggregationField === undefined) {\n      this.segmentAggregationTarget = this.uiSegmentSrv.newFake(\n        'select target attribute',\n        'value',\n        'query-segment-value'\n      );\n    } else {\n      this.segmentAggregationTarget = this.uiSegmentSrv.newSegment({\n        value: this.target.aggregationField,\n      });\n    }\n\n    if (this.target.groupBy === undefined) {\n      this.groupBySegment = this.uiSegmentSrv.newPlusButton();\n    } else {\n      this.groupBySegment = this.uiSegmentSrv.newSegment({\n        value: this.target.groupBy,\n      });\n    }\n\n    if (this.target.namespace === undefined) {\n      this.target.namespace = 'default';\n    }\n\n    this.namespaceSegment = this.uiSegmentSrv.newSegment({value: this.target.namespace});\n\n    appEvents.on('ds-request-response', this.onResponseReceived, $scope);\n    this.panelCtrl.events.on('refresh', this.onRefresh, $scope);\n    this.panelCtrl.events.on('data-received', this.onDataReceived, $scope);\n\n    this.panelCtrl.refresh();\n  }\n\n  /**\n   * Creates an array containg segments which represent a in-browser filter. The first segment represents the filter-key,\n   * the second the operator and the third the filter-value.\n   */\n  _createClientFilterSegments = (filter: ClientSideFilter) => {\n    const segmentArray = [\n      this.uiSegmentSrv.newKey(filter.key),\n      this.uiSegmentSrv.newOperator(filter.matcher),\n      this.uiSegmentSrv.newKeyValue(filter.value),\n    ];\n\n    return segmentArray;\n  };\n\n  /**\n   * Creates an array containg segments which represent a response filter (sever-side). The first segment represents the type\n   * of the filer (labelSelector or fieldSelector), the second the filter-key, the third the operator and the fourth the filter-value.\n   */\n  _createServerFilterSegments = (filter: ServerSideFilter) => {\n    const type =\n      filter.type === ServerSideFilterType.FIELD ? 'fieldSelector' : 'labelSelector';\n\n    const segmentArray = [\n      this.uiSegmentSrv.newCondition(type),\n      this.uiSegmentSrv.newKey(filter.key),\n      this.uiSegmentSrv.newOperator(filter.matcher),\n      this.uiSegmentSrv.newKeyValue(filter.value),\n    ];\n\n    return segmentArray;\n  };\n\n  /**\n   * Returns the currently selected aggregation type.\n   */\n  getCurrentAggregationType = () => {\n    return <AggregationType>_.find(AGGREGATION_TYPES, {\n      value: this.target.aggregationType,\n    });\n  };\n\n  /**\n   * Called if the aggregation field changes.\n   */\n  onAggregationFieldChange = () => {\n    this.target.aggregationField = this.segmentAggregationTarget.value;\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Called if the aggregation type changes.\n   */\n  onAggregationTypeChange = () => {\n    this.target.aggregationRequiresTarget = this.getCurrentAggregationType().requiresTarget;\n    this._resetAggregation();\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Resets the aggregation options.\n   */\n  _resetAggregation = () => {\n    delete this.target.aggregationAlias;\n    delete this.target.aggregationField;\n\n    this.removeGroupBy();\n\n    this.segmentAggregationTarget = this.uiSegmentSrv.newFake(\n      'select target attribute',\n      'value',\n      'query-segment-value'\n    );\n  };\n\n  /**\n   * Returns selectable options (all existing keys) for the aggregation field segment.\n   */\n  getTargetOptions = () => {\n    const options: string[] = this.getAllDeepKeys();\n    const segments: any[] = _.map(options, option =>\n      this.uiSegmentSrv.newSegment({value: option})\n    );\n\n    return this.$q.when(segments);\n  };\n\n  /**\n   * Returns selectable options (all existing keys) for the group-by segment.\n   */\n  getGroupByOptions = () => {\n    const options: string[] = this.getAllDeepKeys();\n    const segments: any[] = _.map(options, option =>\n      this.uiSegmentSrv.newSegment({value: option})\n    );\n\n    return this.$q.when(segments);\n  };\n\n  /**\n   * Called when the user changes the groupBy attribute.\n   */\n  onGroupByChange = () => {\n    this.target.groupBy = this.groupBySegment.value;\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Removes the groupBy attribute.\n   */\n  removeGroupBy = () => {\n    this.groupBySegment = this.uiSegmentSrv.newPlusButton();\n    delete this.target.groupBy;\n    delete this.target.groupAlias;\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Returns selectable options for the namespace segment.\n   */\n  getNamespaceOptions = () => {\n    return Sensu.query(this.datasource, {\n      method: 'GET',\n      url: '/namespaces',\n      namespaces: [],\n      limit: 0,\n      responseFilters: [],\n    })\n      .then(result => {\n        // get existing namespaces based on query result\n        const namespaces = _.map(result, namespace => namespace.name);\n\n        // add all option\n        namespaces.unshift('*');\n\n        // add template variables\n        _.each(this.templateSrv.variables, variable =>\n          namespaces.unshift('$' + variable.name)\n        );\n\n        return _.map(namespaces, option => this.uiSegmentSrv.newSegment({value: option}));\n      })\n      .catch(() => {\n        return [];\n      });\n  };\n\n  /**\n   * Called of the namespace is changing.\n   */\n  onNamespaceChange = () => {\n    this.target.namespace = this.namespaceSegment.value;\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Resets the field and filter segments.\n   */\n  _reset = () => {\n    this.target.fieldSelectors = [new FieldSelector(this, '*')];\n    this.clientFilterSegments = [[this.uiSegmentSrv.newPlusButton()]];\n    this.serverFilterSegments = [[this.uiSegmentSrv.newPlusButton()]];\n    this._updateFilterTarget();\n  };\n\n  /**\n   * Called when the api is changing.\n   */\n  onApiChange = () => {\n    this._reset();\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Called when the query type is changing.\n   */\n  onQueryTypeChange = () => {\n    this._resetAggregation();\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Removes the filter at the given index.\n   */\n  removeFilter = (index: number, isServerFilter: boolean) => {\n    const targetArray = isServerFilter\n      ? this.serverFilterSegments\n      : this.clientFilterSegments;\n    targetArray.splice(index, 1);\n    this._updateFilterTarget();\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Called when a filter is changing.\n   */\n  onFilterSegmentUpdate = (segment, parentIndex, index) => {\n    if (segment.type === 'plus-button') {\n      this._addClientFilterSegment(segment);\n      return;\n    }\n\n    if (index == 2) {\n      const segmentValue = segment.value;\n      if (/\\/.*\\/\\w*/.test(segmentValue)) {\n        this.clientFilterSegments[parentIndex][1] = this.uiSegmentSrv.newOperator('=~');\n      }\n    }\n\n    this._updateFilterTarget();\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Adds a new in-browser filter.\n   */\n  _addClientFilterSegment = (sourceSegment: any) => {\n    const segmentArray: any[] = [\n      this.uiSegmentSrv.newKey(sourceSegment.value),\n      this.uiSegmentSrv.newOperator('=='),\n      this.uiSegmentSrv.newFake('select filter value', 'value', 'query-segment-value'),\n    ];\n\n    this.clientFilterSegments.pop();\n    this.clientFilterSegments.push(segmentArray);\n    this.clientFilterSegments.push([this.uiSegmentSrv.newPlusButton()]);\n  };\n\n  /**\n   * Adds a new response filter.\n   */\n  _addServerFilterSegment = (sourceSegment: any) => {\n    const segmentArray: any[] = [\n      this.uiSegmentSrv.newCondition(sourceSegment.value),\n      this.uiSegmentSrv.newFake('select filter key', 'value', 'query-segment-value'),\n      this.uiSegmentSrv.newOperator('=='),\n      this.uiSegmentSrv.newFake('select filter value', 'value', 'query-segment-value'),\n    ];\n\n    this.serverFilterSegments.pop();\n    this.serverFilterSegments.push(segmentArray);\n    this.serverFilterSegments.push([this.uiSegmentSrv.newPlusButton()]);\n  };\n\n  /**\n   * Called when a response filter configuration is changed.\n   *\n   * @param segment the segment which has been changed\n   */\n  onServerFilterSegmentUpdate = segment => {\n    if (segment.type === 'plus-button') {\n      this._addServerFilterSegment(segment);\n      return;\n    }\n\n    this._updateFilterTarget();\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Returns selectable options for filter segments.\n   */\n  getFilterSegmentOptions = (segment, parentIndex, index) => {\n    let segments: any[] = [];\n\n    if (segment.type === 'operator') {\n      segments = this.uiSegmentSrv.newOperators(['==', '=~', '!=', '!~', '<', '>']);\n    } else if (this.dataPreview && this.dataPreview.length > 0) {\n      let options: string[] = [];\n      if (index === 0) {\n        options = this.getAllDeepKeys();\n      } else if (index === 2) {\n        const filterKey = this.clientFilterSegments[parentIndex][0].value;\n        options = _(this.dataPreview)\n          .map(data => _.get(data, filterKey))\n          .uniq()\n          .value();\n\n        _.each(this.templateSrv.variables, variable =>\n          options.unshift('/$' + variable.name + '/')\n        );\n      }\n      segments = _.map(options, option => this.uiSegmentSrv.newSegment(String(option)));\n    }\n\n    return this.$q.when(segments);\n  };\n\n  /**\n   * The segments which represents the specified filters will not be persisted and passed to the data source.\n   * Instead, an object is created which represents the filters which is passed to the data source and\n   * persisted by Grafana. Calling this method syncs the object (target) and updates its value to match the\n   * segments' values specified by the user.\n   */\n  _updateFilterTarget = () => {\n    const target = <GrafanaTarget>this.target;\n\n    // update client filters\n    const clientFilters = _(this.clientFilterSegments)\n      .filter(segmentArray => segmentArray.length === 3)\n      .filter(segmentArray => !segmentArray[2].fake)\n      .map(segmentArray => {\n        return <ClientSideFilter>{\n          key: segmentArray[0].value,\n          matcher: segmentArray[1].value,\n          value: segmentArray[2].value,\n        };\n      })\n      .value();\n\n    target.clientSideFilters = clientFilters;\n\n    // update server filters\n    const serverFilters = _(this.serverFilterSegments)\n      .filter(segmentArray => segmentArray.length === 4)\n      .filter(segmentArray => !segmentArray[1].fake && !segmentArray[3].fake)\n      .map(segmentArray => {\n        let type;\n        switch (segmentArray[0].value) {\n          case 'fieldSelector':\n            type = ServerSideFilterType.FIELD;\n            break;\n          case 'labelSelector':\n            type = ServerSideFilterType.LABEL;\n            break;\n          default:\n            return <ServerSideFilter>{};\n        }\n\n        return <ServerSideFilter>{\n          key: segmentArray[1].value,\n          matcher: segmentArray[2].value,\n          value: segmentArray[3].value,\n          type,\n        };\n      })\n      .filter(filter => filter.type !== undefined)\n      .value();\n\n    target.serverSideFilters = serverFilters;\n  };\n\n  /**\n   * Returns all existing keys of the current data preview.\n   */\n  getAllDeepKeys = () => {\n    return _.flatMap(this.combineKeys(this.dataPreview[0]), e => e);\n  };\n\n  /**\n   * Returns selectable options for the field segments.\n   */\n  getFieldSelectorOptions = (segment, parentIndex, index) => {\n    let segments: any[] = [];\n\n    if (this.dataPreview && this.dataPreview.length > 0) {\n      let options: string[] = [];\n\n      let currentSelection: any = this.dataPreview[0];\n\n      if (index > 0) {\n        for (let i = 0; i < index; i++) {\n          const fieldSegment = this.target.fieldSelectors[parentIndex].fieldSegments[i];\n          currentSelection = _.get(currentSelection, fieldSegment.value);\n        }\n      }\n\n      options = _.concat(options, ['*']);\n      options = _.concat(options, Object.keys(currentSelection));\n\n      options.sort();\n\n      segments = _.map(options, option => this.uiSegmentSrv.newSegment({value: option}));\n    }\n\n    return this.$q.when(segments);\n  };\n\n  /**\n   * Called if a field segment is changed.\n   */\n  onFieldSelectorSegmentUpdate = (segment, parentIndex) => {\n    if (segment == this.addFieldSegment) {\n      this.target.fieldSelectors.push(new FieldSelector(this, segment.value));\n      this.addFieldSegment = this.uiSegmentSrv.newPlusButton();\n    } else {\n      this.target.fieldSelectors[parentIndex].refresh(this);\n    }\n\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Removes the field selector on the specified index.\n   */\n  removeField = index => {\n    this.target.fieldSelectors.splice(index, 1);\n    this.panelCtrl.refresh();\n  };\n\n  /**\n   * Called if an alias is changing.\n   */\n  onAliasChange = () => {\n    this.panelCtrl.refresh();\n  };\n\n  combineKeys = object => {\n    const keys: string[] = Object.keys(object);\n\n    return _.flatMap(keys, key => {\n      if (_.isPlainObject(object[key])) {\n        return _.map(this.combineKeys(object[key]), nestedKeys => {\n          return key + '.' + nestedKeys;\n        });\n      } else {\n        return key;\n      }\n    });\n  };\n\n  /**\n   * Returns the currently selected api endpoint.\n   */\n  _getCurrentApi = () => {\n    return _.find(API_ENDPOINTS, {value: this.target.apiEndpoints});\n  };\n\n  getServerFilterOptions = (segment, parentIndex) => {\n    if (segment.type === 'operator') {\n      return this.$q.when(\n        this.uiSegmentSrv.newOperators(['==', '!=', 'in', 'notin', 'matches'])\n      );\n    } else if (segment.type === 'plus-button' || segment.type === 'condition') {\n      return this.$q.when(\n        _.map(['fieldSelector', 'labelSelector'], value =>\n          this.uiSegmentSrv.newSegment({value})\n        )\n      );\n    }\n\n    const options: string[] = _.map(\n      this.templateSrv.variables,\n      variable => '\"$' + variable.name + '\"'\n    );\n\n    const filterType = this.serverFilterSegments[parentIndex][0].value;\n\n    if (filterType === 'fieldSelector') {\n      const currentApi = this._getCurrentApi();\n      if (currentApi) {\n        currentApi.fieldSelectors.forEach(field => options.push(field));\n      }\n    }\n\n    const segments = _.map(options, option =>\n      this.uiSegmentSrv.newSegment(new String(option))\n    );\n\n    return this.$q.when(segments);\n  };\n\n  onDataReceived = () => {\n    if (this.dataPreviewBuffer.length > 0) {\n      // this is done so that we get the response from all querys. otherwise the last query could override the\n      // data which we need\n      //\n      // TODO only store the data related to the current query\n      this.dataPreview = _.flatten(this.dataPreviewBuffer);\n      this.dataPreviewBuffer = [];\n    }\n  };\n\n  /**\n   * Called when a request is finished. The requests data is stored and used as a data preview which is basis for auto completions.\n   */\n  onResponseReceived = response => {\n    if (!response.config.url.endsWith('/auth')) {\n      this.dataPreviewBuffer.push(response.data);\n    }\n  };\n\n  onRefresh = () => {\n    //TODO\n    this.dataPreview = {};\n  };\n\n  /**\n   * Returns a string representation of the current query configuration.\n   */\n  getCollapsedText() {\n    return targetToQueryString(this.target);\n  }\n}\n","import _ from 'lodash';\r\nimport {\r\n  AccessToken,\r\n  QueryOptions,\r\n  ServerSideFilter,\r\n  ServerSideFilterType,\r\n} from '../types';\r\n\r\n/**\r\n * Class which encapsulates the query mechanism against the Sensu Go API.\r\n */\r\nexport default class Sensu {\r\n  /**\r\n   * The max duration a token is valid in seconds.\r\n   */\r\n  static readonly tokenTimeout_s = 600;\r\n  /**\r\n   * This duration will be susbtracted of the `tokenTimeout_s` duration.\r\n   */\r\n  static readonly tokenExpireOffset_s = 60;\r\n  /**\r\n   * The API's base url.\r\n   */\r\n  static readonly apiBaseUrl = '/api/core/v2';\r\n\r\n  /**\r\n   * The data source route used for API key authentication. See also the plugin.json file.\r\n   */\r\n  static readonly apiKeyUrlPrefix = '/api_key_auth';\r\n\r\n  /**\r\n   * Executes a query against the given datasource. An access token will be gathered if needed.\r\n   * For each namespace specified in the passed options, a separate query will be executed.\r\n   *\r\n   * @param datasource the datasource to use\r\n   * @param options the options specifying the query's request\r\n   */\r\n  static query(datasource: any, options: QueryOptions) {\r\n    const {namespaces} = options;\r\n\r\n    if (_.isEmpty(namespaces) && options.url === '/namespaces') {\r\n      namespaces.push(''); // dummy element to execute a query\r\n    }\r\n\r\n    const queries = _.map(namespaces, namespace =>\r\n      this._doQuery(datasource, options, namespace)\r\n    );\r\n\r\n    return Promise.all(queries).then(data => {\r\n      return _.flatten(data);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executes a query against the given datasource. An access token will be gathered if needed.\r\n   *\r\n   * @param datasource the datasource to use\r\n   * @param options the options specifying the query's request\r\n   * @param namespace the namespace used by this query\r\n   */\r\n  static _doQuery(\r\n    datasource: any,\r\n    options: QueryOptions,\r\n    namespace: string,\r\n    retryCount = 0\r\n  ) {\r\n    const {method, url} = options;\r\n\r\n    let fullUrl: string;\r\n    if (url === '/namespaces') {\r\n      fullUrl = Sensu.apiBaseUrl + '/namespaces';\r\n    } else {\r\n      const namespacePath = namespace === '*' ? '' : '/namespaces/' + namespace;\r\n      fullUrl = Sensu.apiBaseUrl + namespacePath + url;\r\n    }\r\n\r\n    const requestParameters = this._getParameters(options);\r\n\r\n    return Sensu._authenticate(datasource)\r\n      .then(() => Sensu._request(datasource, method, fullUrl, requestParameters))\r\n      .then(result => result.data)\r\n      .catch(error => {\r\n        // we'll retry once\r\n        if (retryCount >= 1) {\r\n          throw error;\r\n        }\r\n\r\n        // delete token details in order to refresh the token in case of basic auth\r\n        delete datasource.instanceSettings.tokens;\r\n\r\n        // the retry is not immediatly done in order to prevent some race conditions\r\n        const delay = Math.floor(1000 + Math.random() * 1000);\r\n\r\n        return new Promise(resolve => setTimeout(resolve, delay)).then(() =>\r\n          this._doQuery(datasource, options, namespace, retryCount + 1)\r\n        );\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Checks whether an access token exist. If none exists or it is expired a new one will be fetched.\r\n   * In case an api key auth is used, this method will never fetch a token.\r\n   *\r\n   * @param datasource the datasource to use\r\n   */\r\n  static _authenticate(datasource: any) {\r\n    const {tokens} = datasource.instanceSettings;\r\n    const useApiKey = _.get(datasource.instanceSettings, 'jsonData.useApiKey', false);\r\n\r\n    // never aquire token in case of api key auth\r\n    if (useApiKey) {\r\n      return Promise.resolve(true);\r\n    }\r\n\r\n    const acquireToken = !tokens || Sensu._isTokenExpired(tokens);\r\n    if (acquireToken) {\r\n      return Sensu._acquireAccessToken(datasource);\r\n    } else {\r\n      return Promise.resolve(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns whether the given token is already expired.\r\n   *\r\n   * @param token the token to check\r\n   */\r\n  static _isTokenExpired(token: AccessToken) {\r\n    const timestampNow: number = Math.floor(Date.now() / 1000);\r\n    let expiresAt: number = token.expires_at;\r\n\r\n    if (token.expires_offset) {\r\n      expiresAt = expiresAt - token.expires_offset - Sensu.tokenExpireOffset_s;\r\n    }\r\n\r\n    return expiresAt < timestampNow;\r\n  }\r\n\r\n  /**\r\n   * Fetches and stores an access token.\r\n   *\r\n   * @param datasource the datasource to use\r\n   */\r\n  static _acquireAccessToken(datasource: any) {\r\n    return Sensu._request(datasource, 'GET', '/auth').then(result => {\r\n      const tokens: AccessToken = result.data;\r\n\r\n      const timestampNow: number = Math.floor(Date.now() / 1000);\r\n      const expiresOffset: number =\r\n        tokens.expires_at - timestampNow - Sensu.tokenTimeout_s;\r\n\r\n      tokens.expires_offset = expiresOffset;\r\n\r\n      datasource.instanceSettings.tokens = tokens;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executes a (potential authenticated) request against the specified url using the given datasource (server) and HTTP method.\r\n   *\r\n   * @param datasource the datasource to use\r\n   * @param method the method of the HTTP request (GET, POST, ...)\r\n   * @param url the url to send the request to\r\n   */\r\n  static _request(\r\n    datasource: any,\r\n    method: string,\r\n    url: string,\r\n    requestParameters: Record<string, string> = {}\r\n  ) {\r\n    const useApiKey = _.get(datasource.instanceSettings, 'jsonData.useApiKey', false);\r\n\r\n    const req: any = {\r\n      method: method,\r\n    };\r\n\r\n    req.headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    if (useApiKey) {\r\n      // authentication via api key using authentication route\r\n      req.url = datasource.url + Sensu.apiKeyUrlPrefix + url;\r\n    } else {\r\n      // authentication via bearer token\r\n      req.url = datasource.url + url;\r\n\r\n      if (_.has(datasource.instanceSettings, 'tokens')) {\r\n        req.headers.Authorization =\r\n          'Bearer ' + datasource.instanceSettings.tokens.access_token;\r\n      }\r\n    }\r\n\r\n    req.params = requestParameters;\r\n\r\n    return datasource.backendSrv\r\n      .datasourceRequest(req)\r\n      .then(Sensu._handleRequestResult, Sensu._handleRequestError);\r\n  }\r\n\r\n  /**\r\n   * Is called when the request is ending successfully. In case of a 401 error, the request is not throwing an error but returning no result object.\r\n   *\r\n   * @param result the request's result object\r\n   */\r\n  static _handleRequestResult(result: any) {\r\n    if (result) {\r\n      return result;\r\n    } else {\r\n      throw {\r\n        message: 'Credentials Invalid: Could not logged in using credentials',\r\n        data: 'access_error',\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is called if the request's promise is getting an error.\r\n   *\r\n   * @param err the request's error object\r\n   */\r\n  static _handleRequestError(err: any) {\r\n    if (err.status !== 0 || err.status >= 300) {\r\n      if (err.data && err.data.message) {\r\n        throw {\r\n          message: 'Sensu Go Error: ' + err.data.message,\r\n          data: err.data,\r\n          config: err.config,\r\n        };\r\n      } else {\r\n        throw {\r\n          message: 'Network Error: ' + err.statusText + '(' + err.status + ')',\r\n          data: err.data,\r\n          config: err.config,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an object which represents the request parameters that should be used\r\n   * by the request representing the data source query.\r\n   *\r\n   * @param options the query options to use as basis for the parameters\r\n   */\r\n  static _getParameters(options: QueryOptions) {\r\n    const {limit, responseFilters} = options;\r\n    const result: any = {};\r\n\r\n    // build the response filter parameters\r\n    const fieldSelector = this._buildFilterParameter(\r\n      responseFilters.filter(filter => filter.type === ServerSideFilterType.FIELD)\r\n    );\r\n    if (fieldSelector !== '') {\r\n      result.fieldSelector = fieldSelector;\r\n    }\r\n\r\n    const labelSelector = this._buildFilterParameter(\r\n      responseFilters.filter(filter => filter.type === ServerSideFilterType.LABEL)\r\n    );\r\n    if (labelSelector !== '') {\r\n      result.labelSelector = labelSelector;\r\n    }\r\n\r\n    // build the limit option\r\n    if (limit > 0) {\r\n      result.limit = limit;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates the parameter value for a response (server-side) filter. More details regarding its\r\n   * format can be found in the documentation: https://docs.sensu.io/sensu-go/latest/api/#response-filtering\r\n   *\r\n   * @param filters the filters which will be included in the filter parameter\r\n   */\r\n  static _buildFilterParameter(filters: ServerSideFilter[]) {\r\n    return _(filters)\r\n      .map(filter => filter.key + ' ' + filter.matcher + ' ' + filter.value)\r\n      .join(' && ');\r\n  }\r\n}\r\n","import {DataPoint, GrafanaTable, GrafanaTimeSeries} from '../types';\r\nimport table_transform from './table_transformer';\r\nimport timeseries_transform from './timeseries_transformer';\r\n\r\nexport default {\r\n  toTable: (dataMatrix: DataPoint[][], vertical: boolean): GrafanaTable => {\r\n    return table_transform(dataMatrix, vertical);\r\n  },\r\n  toTimeSeries: (dataMatrix: DataPoint[][]): GrafanaTimeSeries[] => {\r\n    return timeseries_transform(dataMatrix);\r\n  },\r\n};\r\n","import {DataPoint, GrafanaTable} from '../types';\r\nimport {TIME_PROPERTIES} from '../constants';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\n/**\r\n * Transforms the given data into a table representation.\r\n */\r\nconst transform = (dataMatrix: DataPoint[][], vertical: boolean): GrafanaTable => {\r\n  const columns = _extractColumns(dataMatrix);\r\n\r\n  // create column index mapping\r\n  const columnIndexMap = {};\r\n  _.each(columns, (column, index) => (columnIndexMap[column.text] = index));\r\n\r\n  // generate data rows\r\n  const rows: any[][] = _.map(dataMatrix, (dataRow) => {\r\n    const row = _.times(columns.length, _.constant(null));\r\n\r\n    _(dataRow)\r\n      .map(({name, value}) => {\r\n        if (_.isArray(value)) {\r\n          return _.map(value, (element, index) => [name + '[' + index + ']', element]);\r\n        } else {\r\n          return [[name, value]];\r\n        }\r\n      })\r\n      .flatten()\r\n      .map((data) => {\r\n        if (_.isPlainObject(data[1]) || _.isArray(data[1])) {\r\n          data[1] = JSON.stringify(data[1]);\r\n        }\r\n        return data;\r\n      })\r\n      .each(([columnName, value]) => {\r\n        row[columnIndexMap[columnName]] = value;\r\n      });\r\n\r\n    return row;\r\n  });\r\n\r\n  if (vertical) {\r\n    return _asVerticalTable(columns, rows);\r\n  }\r\n\r\n  // create grafana result object\r\n  return <GrafanaTable>{\r\n    columns,\r\n    rows,\r\n    type: 'table',\r\n  };\r\n};\r\n\r\nconst _asVerticalTable = (dataColumns, dataRows: any[][]): GrafanaTable => {\r\n  // fixed table headers\r\n  const columns = [\r\n    {\r\n      text: 'Attribute',\r\n    },\r\n    {\r\n      text: 'Value',\r\n    },\r\n  ];\r\n\r\n  const rows = _(dataRows)\r\n    .flatten()\r\n    .map((value, idx) => [dataColumns[idx].text, value])\r\n    .value();\r\n\r\n  // this is done because users cannot define a time formatting based on rows\r\n  _convertTimestamps(rows);\r\n\r\n  return <GrafanaTable>{\r\n    columns,\r\n    rows,\r\n    type: 'table',\r\n  };\r\n};\r\n\r\nconst _convertTimestamps = (rows: any[][]) => {\r\n  _.each(rows, (row) => {\r\n    const attribute = row[0];\r\n    const value = row[1];\r\n\r\n    for (let index = 0; index < TIME_PROPERTIES.length; index++) {\r\n      if (attribute === TIME_PROPERTIES[index]) {\r\n        const time = _.defaultTo(value, -1);\r\n        if (time > 0) {\r\n          row[1] = moment(time).format(\"YYYY-MM-DD HH:mm:ss\");;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Returns an array of columns which exist in the given data matrix. Each data point attribute will be\r\n * represents by a column.\r\n *\r\n * @param dataMatrix the data basis\r\n */\r\nconst _extractColumns = (dataMatrix: DataPoint[][]) => {\r\n  const isArrayMarker = {};\r\n\r\n  // extract existing columns\r\n  return _(dataMatrix)\r\n    .flatten()\r\n    .map(({name, value}) => {\r\n      if (_.isArray(value)) {\r\n        isArrayMarker[name] = true;\r\n        return _.times(value.length, (index) => name + '[' + index + ']');\r\n      } else {\r\n        if (_.isNil(value) && _.get(isArrayMarker, name, false)) {\r\n          return [];\r\n        }\r\n        return [name];\r\n      }\r\n    })\r\n    .flatten()\r\n    .uniq()\r\n    .map((name) => {\r\n      return {\r\n        text: name,\r\n      };\r\n    })\r\n    .value();\r\n};\r\n\r\nexport default transform;\r\n","import {DataPoint, GrafanaTimeSeries} from '../types';\r\nimport _ from 'lodash';\r\n\r\n/**\r\n * Transforms the given data into a time series representation.\r\n */\r\nconst transform = (dataMatrix: DataPoint[][]): GrafanaTimeSeries[] => {\r\n  const now: number = Date.now();\r\n\r\n  // maps the data to a series - skips all values which are not finite\r\n  // - name => series name\r\n  // - value => value\r\n  return _(dataMatrix)\r\n    .flatten()\r\n    .filter(data => _.isFinite(data.value))\r\n    .map(data => {\r\n      return <GrafanaTimeSeries>{\r\n        target: data.name,\r\n        datapoints: [[data.value, now]],\r\n      };\r\n    })\r\n    .value();\r\n};\r\n\r\nexport default transform;\r\n","import FieldSelector from './FieldSelector';\r\n\r\nexport interface AggregationType {\r\n  readonly value: string;\r\n  readonly text: string;\r\n  readonly requiresTarget: boolean;\r\n}\r\n\r\nexport interface ApiEndpoint {\r\n  readonly text: string;\r\n  readonly value: string;\r\n  readonly url: string;\r\n  readonly fieldSelectors: string[];\r\n}\r\n\r\nexport interface ColumnMapping {\r\n  path: string;\r\n  alias: string;\r\n}\r\n\r\nexport interface DataPoint {\r\n  readonly value: any;\r\n  readonly name: string;\r\n}\r\n\r\nexport interface BaseFilter {\r\n  key: string;\r\n  value: string;\r\n  matcher: string;\r\n}\r\n\r\nexport type ClientSideFilter = BaseFilter;\r\n\r\nexport interface ServerSideFilter extends BaseFilter {\r\n  type: ServerSideFilterType;\r\n}\r\n\r\nexport enum ServerSideFilterType {\r\n  FIELD = 0,\r\n  LABEL = 1,\r\n}\r\n\r\nexport interface InstanceSettings {\r\n  // the datasource url\r\n  url: string;\r\n\r\n  // whether basic auth is used\r\n  basicAuth: boolean;\r\n\r\n  // additional data\r\n  jsonData: JsonData;\r\n\r\n  // additional secured data\r\n  secureJsonData: SecureJsonData;\r\n\r\n  // map defining which secured data element is set\r\n  secureJsonFields: SecureJsonFields;\r\n}\r\n\r\nexport interface JsonData {\r\n  // copy of the current datasource url - used for dynamic routing\r\n  currentUrl: string;\r\n\r\n  // whether an API key should be used\r\n  useApiKey: boolean;\r\n}\r\n\r\nexport interface SecureJsonData {\r\n  // the specified API key\r\n  apiKey?: string;\r\n}\r\n\r\nexport interface SecureJsonFields {\r\n  // whether an API key has been stored by Grafana\r\n  apiKey?: boolean;\r\n}\r\n\r\nexport interface PreparedTarget {\r\n  readonly apiUrl: string;\r\n  readonly clientFilters: ClientSideFilter[];\r\n  readonly serverFilters: ServerSideFilter[];\r\n  readonly target: GrafanaTarget;\r\n}\r\n\r\nexport interface QueryComponents {\r\n  readonly apiKey: string;\r\n  readonly namespace: string;\r\n  readonly selectedField: string;\r\n  readonly clientFilters: ClientSideFilter[];\r\n  readonly serverFilters: ServerSideFilter[];\r\n  readonly limit: number;\r\n}\r\n\r\nexport interface TextValue {\r\n  readonly text: string;\r\n  readonly value: string;\r\n}\r\n\r\nexport interface QueryOptions {\r\n  method: string;\r\n  url: string;\r\n  namespaces: string[];\r\n  limit: number;\r\n  forceAccessTokenRefresh?: boolean;\r\n  responseFilters: ServerSideFilter[];\r\n}\r\n\r\nexport interface AccessToken {\r\n  readonly access_token: string;\r\n  readonly expires_at: number;\r\n  readonly refresh_token: string;\r\n  expires_offset?: number;\r\n}\r\n\r\nexport interface GrafanaTarget {\r\n  /** @deprecated */\r\n  filterSegments?: any[];\r\n  /** @deprecated */\r\n  aggregation?: string;\r\n\r\n  aggregationAlias?: string;\r\n  aggregationField?: string;\r\n  aggregationRequiresTarget?: boolean;\r\n  aggregationType?: string;\r\n  apiEndpoints: string;\r\n  fieldSelectors: FieldSelector[];\r\n  format: string;\r\n  groupAlias?: string;\r\n  groupBy?: string;\r\n  limit?: string;\r\n  namespace: string;\r\n  namespaces: string[]; // splitted and resolved namespace attribute\r\n  queryType: string;\r\n  refId: string;\r\n\r\n  version: number;\r\n  clientSideFilters: ClientSideFilter[];\r\n  serverSideFilters: ServerSideFilter[];\r\n}\r\n\r\nexport interface GrafanaUiSegment {\r\n  value: string;\r\n}\r\n\r\nexport interface GrafanaTimeSeries {\r\n  target: string; // time series name\r\n  datapoints: unknown[];\r\n}\r\n\r\nexport interface GrafanaTable {\r\n  columns: unknown[];\r\n  rows: unknown[][];\r\n  type: string;\r\n}\r\n","import _ from 'lodash';\r\nimport {ClientSideFilter, GrafanaTarget} from '../types';\r\n\r\n/** The latest configuration version. */\r\nconst LATEST_VERSION = 2;\r\n\r\n/** Migrates the passed configuration target to the latest version. The passed object will be mutated. */\r\nconst migrate = (target: GrafanaTarget): GrafanaTarget => {\r\n  const {version} = target;\r\n\r\n  if (version === undefined) {\r\n    init(target);\r\n  }\r\n  if (version === 1) {\r\n    toVersion2(target);\r\n  }\r\n\r\n  return target;\r\n};\r\n\r\n/** Initializes the configuration target. */\r\nconst init = (target: GrafanaTarget) => {\r\n  target.version = LATEST_VERSION;\r\n  target.clientSideFilters = [];\r\n  target.serverSideFilters = [];\r\n};\r\n\r\n/** Migrates the passed configuration target from version 1 to version 2. */\r\nconst toVersion2 = (target: GrafanaTarget) => {\r\n  console.log('Migrating data source configuration to version 2.');\r\n\r\n  const {filterSegments} = target;\r\n\r\n  const filters = _(filterSegments)\r\n    .filter(segments => segments.length === 3)\r\n    .filter(segments => !_.get(segments[2], 'fake', false))\r\n    .map(segments => {\r\n      const matcher = segments[1].value === '=' ? '==' : segments[1].value;\r\n\r\n      return <ClientSideFilter>{\r\n        key: segments[0].value,\r\n        matcher,\r\n        value: segments[2].value,\r\n      };\r\n    })\r\n    .value();\r\n\r\n  delete target.filterSegments;\r\n\r\n  target.clientSideFilters = filters;\r\n  target.serverSideFilters = [];\r\n\r\n  target.version = 2;\r\n};\r\n\r\nexport default {\r\n  migrate,\r\n};\r\n","import _ from 'lodash';\r\nimport {DataPoint} from '../types';\r\n\r\n/**\r\n * Does a count aggregation. The number of elements in the given data is returned.\r\n *\r\n * @param data the data to aggregate\r\n * @param name  the name of the resulting value\r\n */\r\nconst count = (data: any[], name: string): DataPoint[] => {\r\n  return <DataPoint[]>[\r\n    {\r\n      name,\r\n      value: data.length,\r\n    },\r\n  ];\r\n};\r\n\r\n/**\r\n * Does a sum aggregation. The sum of the specified attribute of all elements in the given data is calculated.\r\n *\r\n * @param data  the data to aggregate\r\n * @param name the name of the resulting value\r\n * @param targetField  the field which should be summed up\r\n */\r\nconst sum = (\r\n  data: any[],\r\n  name: string,\r\n  targetField: string | undefined\r\n): DataPoint[] | null => {\r\n  if (!targetField) {\r\n    return [];\r\n  }\r\n\r\n  let sum: number | null = _.sumBy(data, targetField);\r\n\r\n  if (!_.isFinite(sum)) {\r\n    sum = null;\r\n  }\r\n\r\n  return <DataPoint[]>[\r\n    {\r\n      name,\r\n      value: sum,\r\n    },\r\n  ];\r\n};\r\n\r\nexport default {count, sum};\r\n","import _ from 'lodash';\r\n\r\n/**\r\n * Returns whether the given data value matchs the filter specified by the filter value in combination with the given operator.\r\n * @param filterValue the filter value\r\n * @param operator the operator used for comparision\r\n * @param dataValue the data value to test\r\n */\r\nexport const matchs = (\r\n  filterValue: string,\r\n  operator: string,\r\n  dataValue: number | string | boolean\r\n): boolean => {\r\n  if (operator === '==') {\r\n    return filterValue == dataValue;\r\n  }\r\n  if (operator === '!=') {\r\n    return filterValue != dataValue;\r\n  }\r\n  if (operator === '=~' || operator === '!~') {\r\n    return _matchRegExp(filterValue, operator, dataValue);\r\n  }\r\n  if (operator === '<' || operator === '>') {\r\n    return _matchNumber(filterValue, operator, dataValue);\r\n  }\r\n\r\n  throw 'Unsupported operator \"' + operator + '\"';\r\n};\r\n\r\n/**\r\n * Matching using '>' and '<' operators.\r\n */\r\nconst _matchNumber = (filterValue: string, operator: string, dataValue: any) => {\r\n  const filterNumber = Number(filterValue);\r\n\r\n  if (!_.isFinite(filterNumber)) {\r\n    console.warn(\r\n      'The specified filter value (' +\r\n        filterValue +\r\n        ') is not compatible to filter on a numeric attribute.'\r\n    );\r\n    return false;\r\n  }\r\n\r\n  if (operator === '<') {\r\n    return dataValue < filterNumber;\r\n  } else {\r\n    return dataValue > filterNumber;\r\n  }\r\n};\r\n\r\n/**\r\n * Matching using regular expressions.\r\n */\r\nconst _matchRegExp = (filterValue: string, operator: string, dataValue: any) => {\r\n  const regex: RegExp = _stringToRegex(filterValue);\r\n\r\n  if (operator === '=~') {\r\n    return regex.test(dataValue);\r\n  } else {\r\n    return !regex.test(dataValue);\r\n  }\r\n};\r\n\r\n/**\r\n * Converts a string to a RegExp instance and keeps optional modifiers.\r\n * @param value the string to convert\r\n */\r\nconst _stringToRegex = (value: string) => {\r\n  const regex = value.match(/\\/(.*)\\/(\\w*)/);\r\n  if (regex) {\r\n    return new RegExp(regex[1], regex[2]);\r\n  } else {\r\n    return new RegExp(value);\r\n  }\r\n};\r\n\r\nexport default {matchs};\r\n","import _ from 'lodash';\r\nimport {DEFAULT_LIMIT, DEFAULT_AGGREGATION_LIMIT} from '../constants';\r\n\r\nimport {\r\n  QueryComponents,\r\n  GrafanaTarget,\r\n  ServerSideFilterType,\r\n  ServerSideFilter,\r\n  ClientSideFilter,\r\n} from '../types';\r\n\r\n/** RegEx matching a in-browser filter of the WHERE-clause. */\r\nconst CLIENT_FILTER_REG_EXP = '([^\\\\s:=!]+)\\\\s*(==|=~|!=|>|<|!~|=)\\\\s*(\\\\S+)';\r\n\r\n/** RegExp of a filter key or value of the server-side filter. */\r\nconst SERVER_FILTER_VALUE_REG_EXP = '\\\\[[^[]+\\\\]|\"[^\"]+\"|\\\\S+';\r\n\r\n/** RegEx matching a response filter (server-side) of the WHERE-clause. */\r\nconst SERVER_FILTER_REG_EXP =\r\n  '(fieldSelector|labelSelector):(' +\r\n  SERVER_FILTER_VALUE_REG_EXP +\r\n  ')\\\\s*(==|!=|IN|NOTIN|MATCHES)\\\\s*(' +\r\n  SERVER_FILTER_VALUE_REG_EXP +\r\n  ')';\r\n\r\n/** RegEx representing a single element of the WHERE-clause. */\r\nconst QUERY_SINGLE_FILTER_REG_EXP =\r\n  '(' + SERVER_FILTER_REG_EXP + '|' + CLIENT_FILTER_REG_EXP + ')';\r\n\r\n/** RegEx representing the whole query string. */\r\nconst QUERY_FULL_REG_EXP =\r\n  '^\\\\s*QUERY\\\\s+API\\\\s+(entity|events|namespaces)\\\\s+(IN\\\\s+NAMESPACE\\\\s+(\\\\S+)\\\\s+)?SELECT\\\\s+(\\\\S+)(\\\\s+WHERE\\\\s+(' +\r\n  QUERY_SINGLE_FILTER_REG_EXP +\r\n  '(\\\\s+AND\\\\s+' +\r\n  QUERY_SINGLE_FILTER_REG_EXP +\r\n  ')*))?(\\\\s+LIMIT\\\\s+(\\\\d+))?\\\\s*$';\r\n\r\n/**\r\n * Creates a query string based on the target definition.\r\n * @param target the data used by the query\r\n */\r\nexport function targetToQueryString(target: GrafanaTarget): string {\r\n  let query: string = 'QUERY API ' + target.apiEndpoints;\r\n\r\n  query += _namespace(target);\r\n\r\n  if (target.queryType === 'field') {\r\n    query += _queryTypeField(target);\r\n  } else if (target.queryType === 'aggregation') {\r\n    query += _queryTypeAggregation(target);\r\n  }\r\n\r\n  query += _whereClause(target);\r\n  query += _limit(target);\r\n\r\n  return query;\r\n}\r\n\r\n/**\r\n * Return the \"select\" statement based on the given target.\r\n * E.g.: SELECT field, another.field AS myField\r\n */\r\nconst _queryTypeField = (target: GrafanaTarget) => {\r\n  const fields = _(target.fieldSelectors)\r\n    .flatMap(selector => {\r\n      if (selector.alias) {\r\n        return selector.getPath() + ' AS ' + selector.alias;\r\n      } else {\r\n        return selector.getPath();\r\n      }\r\n    })\r\n    .join(', ');\r\n\r\n  return ' SELECT ' + fields;\r\n};\r\n\r\n/**\r\n * Return the \"aggregation\" statement based on the given target.\r\n * E.g.:  AGGREGATE sum ON field\r\n */\r\nconst _queryTypeAggregation = (target: GrafanaTarget) => {\r\n  let query: string = ' AGGREGATE ' + target.aggregationType;\r\n\r\n  if (target.aggregationRequiresTarget) {\r\n    query += ' ON ' + target.aggregationField;\r\n  }\r\n\r\n  return query;\r\n};\r\n\r\n/**\r\n * Return the namespace statement based on the given target.\r\n * E.g.:  IN NAMESPACE default\r\n */\r\nconst _namespace = (target: GrafanaTarget) => {\r\n  if (target.namespace === 'default') {\r\n    return '';\r\n  } else {\r\n    return ' IN NAMESPACE ' + target.namespace;\r\n  }\r\n};\r\n\r\n/**\r\n * Return the where clause based on the given target.\r\n * E.g.: WHERE field=value AND status>0\r\n */\r\nconst _whereClause = (target: GrafanaTarget) => {\r\n  const {clientSideFilters, serverSideFilters} = target;\r\n\r\n  const serverFilters = _(serverSideFilters)\r\n    .map(\r\n      filter =>\r\n        (filter.type == ServerSideFilterType.FIELD ? 'fieldSelector' : 'labelSelector') +\r\n        ':' +\r\n        filter.key +\r\n        ' ' +\r\n        filter.matcher.toUpperCase() +\r\n        ' ' +\r\n        filter.value\r\n    )\r\n    .value();\r\n\r\n  const clientFilters = _(clientSideFilters)\r\n    .map(filter => filter.key + ' ' + filter.matcher + ' ' + filter.value)\r\n    .value();\r\n\r\n  const whereClause = _([serverFilters, clientFilters])\r\n    .flatten()\r\n    .join(' AND ');\r\n\r\n  if (whereClause) {\r\n    return ' WHERE ' + whereClause;\r\n  } else {\r\n    return '';\r\n  }\r\n};\r\n\r\n/**\r\n * Return the limit statement based on the given target. If no limit is specified the default limit will be used.\r\n * E.g.: LIMIT 100\r\n */\r\nconst _limit = (target: GrafanaTarget) => {\r\n  let queryLimit: number;\r\n\r\n  if (target.limit) {\r\n    queryLimit = _.defaultTo(parseInt(target.limit), DEFAULT_LIMIT);\r\n  } else {\r\n    // Use a special default limit in aggregation queries\r\n    if (target.queryType === 'aggregation') {\r\n      queryLimit = DEFAULT_AGGREGATION_LIMIT;\r\n    } else {\r\n      queryLimit = DEFAULT_LIMIT;\r\n    }\r\n  }\r\n\r\n  if (queryLimit > 0) {\r\n    return ' LIMIT ' + queryLimit;\r\n  } else {\r\n    return '';\r\n  }\r\n};\r\n\r\nexport const extractQueryComponents = (query: string): QueryComponents | null => {\r\n  const queryRegExp = new RegExp(QUERY_FULL_REG_EXP, 'i');\r\n  const matchResult = query.match(queryRegExp);\r\n\r\n  if (!matchResult) {\r\n    return null;\r\n  }\r\n\r\n  let namespace: string;\r\n  if (matchResult[3] !== undefined) {\r\n    namespace = matchResult[3];\r\n  } else {\r\n    namespace = 'default';\r\n  }\r\n\r\n  const components: QueryComponents = {\r\n    apiKey: matchResult[1],\r\n    namespace: namespace,\r\n    selectedField: matchResult[4],\r\n    clientFilters: [],\r\n    serverFilters: [],\r\n    limit: parseInt(matchResult[25]),\r\n  };\r\n\r\n  if (matchResult[6] !== undefined) {\r\n    const filterRegExp = new RegExp(\r\n      SERVER_FILTER_REG_EXP + '|' + CLIENT_FILTER_REG_EXP,\r\n      'gi'\r\n    );\r\n\r\n    const whereClause: string = matchResult[6];\r\n\r\n    let match: RegExpExecArray | null;\r\n    while ((match = filterRegExp.exec(whereClause)) !== null) {\r\n      const isServerFilter = match[1] !== undefined;\r\n\r\n      if (isServerFilter) {\r\n        // add response filter\r\n        const filter: ServerSideFilter = {\r\n          type:\r\n            match[1] === 'fieldSelector'\r\n              ? ServerSideFilterType.FIELD\r\n              : ServerSideFilterType.LABEL,\r\n          key: match[2],\r\n          matcher: match[3],\r\n          value: match[4],\r\n        };\r\n\r\n        components.serverFilters.push(filter);\r\n      } else {\r\n        // add in-browser filter\r\n        const filter: ClientSideFilter = {\r\n          key: match[5],\r\n          matcher: match[6] === '=' ? '==' : match[6],\r\n          value: match[7],\r\n        };\r\n\r\n        components.clientFilters.push(filter);\r\n      }\r\n    }\r\n  }\r\n\r\n  return components;\r\n};\r\n\r\nexport default {targetToQueryString, extractQueryComponents};\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE_grafana_app_core_app_events__;","module.exports = __WEBPACK_EXTERNAL_MODULE_grafana_app_plugins_sdk__;","module.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;","module.exports = __WEBPACK_EXTERNAL_MODULE_moment__;"],"sourceRoot":""}